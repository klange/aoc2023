from aoc import lines, memoize

def do_main(substr,b):
    substr = substr.strip('.')
    let groups = tuple(int(x) for x in b.split(','))

    @memoize
    def try_it(a):
        let j, group_ind = a
        if group_ind == len(groups):
            if '#' not in substr[j:]:
                return 1
            return 0
        let p = 0
        let i = j
        let _count = 0
        while i < len(substr):
            if substr[i] == '#':
                i++
                p++
            else if substr[i] == '.':
                if p == 0:
                    i++
                    continue
                if p == groups[group_ind]:
                    return _count + try_it((i+1,group_ind+1))
                return _count
            else if substr[i] == '?':
                if p < groups[group_ind]:
                    if p == 0:
                        _count += try_it((i+1,group_ind))
                    i++
                    p++
                else if p == groups[group_ind]:
                    return _count + try_it((i+1,group_ind+1))
                else if p > groups[group_ind]:
                    return _count
        if p == groups[group_ind] and group_ind == len(groups) - 1:
            return _count + 1
        return _count

    return try_it((0,0))

def part1():
    let total = 0
    for line in lines:
        let a, b = line.split()
        total += do_main(a,b)
    print(total)

def part2():
    let total = 0
    for line in lines:
        let a, b = line.split()
        a = '?'.join([a]*5)
        b = ','.join([b]*5)
        total += do_main(a,b)
    print(total)

part1()
part2()

