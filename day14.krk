from aoc import lines

def main(part):

    let world = [bytearray(line.encode()) for line in lines]
    let M = len(world)

    let c_h = ord('#')
    let c_O = ord('O')
    let c_p = ord('.')

    def tilt(world, row, col):
        for a in range(M):
            let f, n, b = 0, 0, 0
            while b <= M:
                if b == M or world[row(a,b,M)][col(a,b,M)] == c_h:
                    let j = b - f - n
                    while j < b - n:
                        world[row(a,j,M)][col(a,j,M)] = c_O
                        j++
                    while j < b:
                        world[row(a,j,M)][col(a,j,M)] = c_p
                        j++
                    f = 0
                    n = 0
                else if world[row(a,b,M)][col(a,b,M)] == c_O:
                    f++
                else if world[row(a,b,M)][col(a,b,M)] == c_p:
                    n++
                b++

    let tilt_east = lambda world: tilt(world,
        (lambda a, b, M: a),
        (lambda a, b, M: M - b - 1))

    let tilt_west = lambda world: tilt(world,
        (lambda a, b, M: a),
        (lambda a, b, M: b))

    let tilt_north = lambda world: tilt(world,
        (lambda a, b, M: b),
        (lambda a, b, M: a))

    let tilt_south = lambda world: tilt(world,
        (lambda a, b, M: M - b - 1),
        (lambda a, b, M: a))

    if part == 1:
        tilt_north(world)
    else if part == 2:
        let seen = {}
        let C
        let i = 0
        while i < 1000000000:
            let t = tuple(line.decode() for line in world)
            if t in seen:
                world = [bytearray(line.encode()) for line in seen[t][0]]
                if C is None:
                    C = i - seen[t][1]
                    i = i + ((1000000000 - i) // C) * C
            else:
                tilt_north(world)
                tilt_west(world)
                tilt_south(world)
                tilt_east(world)
                seen[t] = tuple(line.decode() for line in world), i
            i += 1
    let load = 0
    for c in range(len(world[0])):
        for r in range(len(world)):
            if world[r][c] == c_O:
                load += len(world)-r
    print(load)

main(1)
main(2)
