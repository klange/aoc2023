from aoc import lines
from time import time
from pheap import PHeap

def main(max_straight,min_turn):
    from math import inf
    let world = [[int(c) for c in line] for line in lines]
    let ly = len(world) # Make bounds checks faster
    let lx = len(world[0])
    let cv = lambda a,b: (a[5] - a[3] - a[2]) < (b[5] - b[3] - b[2])
    let visited = {} # Current cheapest cost to reach this state
    let next = PHeap(cv) # States to try next; best guess first.
    next.insert((0,0,0,1,1,world[0][1])) # Go right from the start.
    next.insert((0,0,1,0,1,world[1][0])) # Go down from the start.
    def maybe(py,px,y,x,d,ny,nx,c):
        if nx < 0 or ny < 0 or nx >= lx or ny >= ly: return # Out of bounds.
        if (py == ny and px == nx): return # Can't go backwards.
        if (y - py) == (ny - y) and (x - px) == (nx - x): # Same direction
            if d >= max_straight: return # Can't go straight for too long.
            next.insert((y,x,ny,nx,d+1,c+world[ny][nx]))
        else if d >= min_turn: # Turning left or right
            next.insert((y,x,ny,nx,1,c+world[ny][nx]))
    while next:
        let py,px,y,x,d,c = next.pop()
        if visited.get((py,px,y,x,d),inf) <= c: continue
        # Have we reached the end?
        if y == ly - 1 and x == lx - 1:
            if d < min_turn: continue # Can't stop here, invalid.
            return c
        visited[py,px,y,x,d] = c
        maybe(py,px,y,x,d,y+1,x,c) # Down
        maybe(py,px,y,x,d,y,x+1,c) # Right
        maybe(py,px,y,x,d,y-1,x,c) # Up
        maybe(py,px,y,x,d,y,x-1,c) # Left
    return None

let start = time()
print(main(3,0))
print(time()-start)
print(main(10,4))
print(time()-start)
