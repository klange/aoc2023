from time import time
from pheap import PHeap

def main(max_straight,min_turn):
    from aoc import lines
    from math import inf

    let ly = len(lines)
    let lx = len(lines[0])

    let cv = lambda a,b: (a[5] + lx - a[3] + ly - a[2] + 2) < (b[5] + lx - b[3] + ly - b[2] + 2)

    let s = inf
    let visited = {}
    let next = PHeap(cv)
    next.insert((0,0,0,1,1,int(lines[0][1])))
    next.insert((0,0,1,0,1,int(lines[1][0])))

    let m = s
    let t_c = int(lines[ly-1][lx-1])
    let best = ()
    def maybe(py,px,y,x,d,ny,nx,c):
        if c >= m or nx < 0 or ny < 0 or nx >= lx or ny >= ly:
            return
        if (py == ny and px == nx):
            return

        if (y - py) == (ny - y) and (x - px) == (nx - x):
            if d >= max_straight: return
            next.insert((y,x,ny,nx,d+1,c+int(lines[ny][nx])))
        else if d >= min_turn:
            next.insert((y,x,ny,nx,1,c+int(lines[ny][nx])))

    while next:
        let py,px,y,x,d,c = next.pop()

        if c + (lx - x + 1) + (ly - y + 1) >= m or visited.get((py,px,y,x,d),inf) <= c:
            continue

        if y == ly - 1 and x == lx - 1:
            if d < min_turn:
                continue
            if c < m:
                m = c
            continue

        visited[py,px,y,x,d] = c
        maybe(py,px,y,x,d,y+1,x,c)
        maybe(py,px,y,x,d,y,x+1,c)
        maybe(py,px,y,x,d,y-1,x,c)
        maybe(py,px,y,x,d,y,x-1,c)

    print(m)

let start = time()
main(3,0)
print(time()-start)
main(10,4)
print(time()-start)
