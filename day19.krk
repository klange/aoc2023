def main():
    from aoc import line_groups, reduce
    from collections import deque

    let instructions, baseparts = line_groups()
    let wf, parts = {'R': None, 'A': 'A'}, []
    for inst in instructions:
        let label, rest = inst.strip('}').split('{')
        wf[label] = {x if ':' not in x else (lambda _: (_[0][0], _[0][1], int(_[0][2:]), _[1]))(x.split(':')) for x in rest.split(',')}
    for part in baseparts:
        parts.append({a[0]: int(a[1]) for a in (x.split('=') for x in part.strip('{}').split(','))})

    def _part1():
        let accepted = []
        for part in parts:
            let current = wf['in']
            while current:
                for rule in current:
                    if isinstance(rule,tuple):
                        let a, o, b, d = rule
                        if o == '>' and part[a] > b:
                            current = wf[d]
                            break
                        else if o == '<' and part[a] < b:
                            current = wf[d]
                            break
                    else:
                        current = wf[rule]
                        break
                if current == 'A':
                    accepted.append(part)
                    current = None
        return sum(sum(p.values()) for p in accepted)

    def _part2():
        let current = wf['in']
        let mp = {'x': 0, 'm': 1, 'a': 2, 's': 3}
        let next = deque()
        next.append(('in',[[1,4000],[1,4000],[1,4000],[1,4000]]))
        let accept = []
        while next:
            let current, states = next.popleft()
            if current == 'R':
                continue
            for rule in wf[current]:
                let nstate = [[x for x in s] for s in states]
                if isinstance(rule,tuple):
                    let a, o, b, d = rule
                    if o == '>':
                        nstate[mp[a]][0] = max(b+1,nstate[mp[a]][0])
                        states[mp[a]][1] = min(b,states[mp[a]][1])
                    if o == '<':
                        nstate[mp[a]][1] = min(b-1,nstate[mp[a]][1])
                        states[mp[a]][0] = max(b,states[mp[a]][0])
                    if not any(a[0] > a[1] for a in nstate):
                        next.append((d,nstate))
                    if any(a[0] > a[1] for a in states):
                        break
                else:
                    if rule == 'A':
                        accept.append(states)
                    else:
                        next.append((rule,states))
        return sum(reduce((lambda a,b: a * (b[1] - b[0] + 1)), [1, *state]) for state in accept)

    print(_part1())
    print(_part2())

main()

