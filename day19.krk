def main():
    from aoc import lines

    let instructions = []
    let parts = []

    let mode = 0
    for line in lines:
        if not line:
            mode++
            continue
        if mode == 0:
            instructions.append(line)
        else if mode == 1:
            let part = {}
            let p = line.replace('{','').replace('}','').split(',')
            for _ in p:
                let a, b = _.split('=')
                part[a] = int(b)
            parts.append(part)

    let wf = {}
    for w in instructions:
        let label, rest = w.replace('}','').split('{')
        let rules = rest.split(',')
        wf[label] = rules

    wf['R'] = None
    wf['A'] = 'A'

    def _part1():
        let accepted = []
        for part in parts:
            let current = wf['in']
            while current:
                for rule in current:
                    if ':' in rule:
                        let f, d = rule.split(':')
                        let b = int(f[2:])
                        if f[1] == '>':
                            if part[f[0]] > b:
                                current = wf[d]
                                break
                        else if f[1] == '<':
                            if part[f[0]] < b:
                                current = wf[d]
                                break
                    else:
                        current = wf[rule]
                        break
                if current == 'A':
                    accepted.append(part)
                    current = None

        let t = 0
        for p in accepted:
            t += sum(p.values())

        return t

    def _part2():
        let current = wf['in']

        let mp = {'x': 0, 'm': 1, 'a': 2, 's': 3}

        from collections import deque
        let next = deque()

        next.append(('in',[[1,4000],[1,4000],[1,4000],[1,4000]]))

        let accept = []

        while next:
            let current, states = next.popleft()

            if current == 'R':
                continue

            for rule in wf[current]:
                let nstate = [[x for x in s] for s in states]
                if ':' in rule:
                    let f, d = rule.split(':')
                    let a = f[0]
                    let o = f[1]
                    let b = int(f[2:])
                    if o == '>':
                        nstate[mp[a]][0] = max(b+1,nstate[mp[a]][0])
                        states[mp[a]][1] = min(b,states[mp[a]][1])
                    if o == '<':
                        nstate[mp[a]][1] = min(b-1,nstate[mp[a]][1])
                        states[mp[a]][0] = max(b,states[mp[a]][0])
                    if not any(a[0] > a[1] for a in nstate):
                        next.append((d,nstate))
                    if any(a[0] > a[1] for a in states):
                        break
                else:
                    if rule == 'A':
                        accept.append(states)
                    else:
                        next.append((rule,states))

        let t = 0
        for state in accept:
            let s = 1
            for a in state:
                s *= (a[1] - a[0] + 1)
            t += s
        return t

    print(_part1())
    print(_part2())

main()

