def main(amount):
    from aoc import lines
    from collections import deque

    let start
    for y in range(len(lines)):
        for x in range(len(lines[0])):
            if lines[y][x] == 'S':
                start = y,x
                break

    let ly = len(lines)
    let lx = len(lines[0])
    let ks = [None for n in range(lx)]
    let bs = [None for n in range(lx)]
    let possible = 0
    let nc, dc
    let cond = amount & 1

    if True:
        let next = deque()
        let touched = {start}
        let last_refresh = 1
        let last_count = 0
        let last_deriv = 0
        let last_thing = [None for n in range(lx)]

        next.append((start, 0))

        def tryIt(y,x,c):
            let my, mx = y % ly, x % lx
            if lines[my][mx] == '#': return
            let f = (y,x)
            if f in touched: return
            let n = f, c
            touched.add(f)
            next.append(n)

        while next:
            let f = next.popleft()
            let p, c = f

            if c != last_refresh:
                last_refresh = c
                if c & 1 != cond:
                    if c > 100:
                        if last_thing[c%lx] is not None:
                            let x = c // lx
                            let t = (possible-last_count)-last_deriv
                            let b = (t - last_thing[c%lx]) // 2
                            let k = t - (b * x)
                            bs[c%lx] = b
                            ks[c%lx] = k
                        last_thing[c%lx] = (possible-last_count)-last_deriv
                    last_deriv = (possible-last_count)
                    last_count = possible
                    if all(x is not None for x in bs):
                        nc = c + 2
                        dc = last_deriv
                        possible = float(possible)
                        print('patterns established by', nc, possible, dc)
                        break
                    if c > amount:
                        return possible

            if c & 1 == cond:
                possible += 1
            let y, x = p
            tryIt(y-1,x,c+1)
            tryIt(y,x-1,c+1)
            tryIt(y+1,x,c+1)
            tryIt(y,x+1,c+1)

    while nc <= amount + 1:
        possible += (dc += bs[nc%lx] * (nc // lx) + ks[nc%lx])
        nc += 2

    for i in range(lx):
        print(f'f[{i}](x) = {bs[i]}x + {ks[i]}')
    return int(possible)

print(main(64))
print(main(26501365))
