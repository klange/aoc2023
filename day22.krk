def main():
    from aoc import lines
    from pheap import PHeap
    from collections import deque

    class Brick:
        def __init__(self, line):
            let left, right = line.split('~')
            self.coords = [[int(x) for x in left.split(',')],[int(x) for x in right.split(',')]]
            self.frozen = False
            self.degenerate = all(self.coords[0][a] == self.coords[1][a] for a in range(3))
            self.below = set()
            self.above = set()
            self.minz = min(self.coords[0][2],self.coords[1][2])

        def freeze(self, world):
            self.frozen = True
            for tile in self.tiles():
                world[tile] = self

        def tiles(self):
            if self.degenerate:
                yield (self.coords[0][0], self.coords[0][1], self.coords[0][2])
                return
            for c in range(3):
                if self.coords[0][c] != self.coords[1][c]:
                    for j in range(min(self.coords[0][c],self.coords[1][c]),max(self.coords[0][c],self.coords[1][c])+1):
                        yield (self.coords[0][0] if c != 0 else j, self.coords[0][1] if c != 1 else j, self.coords[0][2] if c != 2 else j)
                    return
            raise ValueError('bad brick?')

        def lower(self):
            self.coords[0][2] -= 1
            self.coords[1][2] -= 1
            self.minz = min(self.coords[0][2],self.coords[1][2])

        def __repr__(self):
            return f'Brick({"~".join(",".join(str(x) for x in c) for c in self.coords)})'

        @staticmethod
        def lt(a,b):
            return a.minz < b.minz

    # Build 'em
    let bricks = []
    for line in lines:
        bricks.append(Brick(line))

    # Drop 'em
    let frozen = {}
    while not all(brick.frozen for brick in bricks):
        let p = PHeap(Brick.lt)
        for brick in bricks:
            if not brick.frozen:
                p.insert(brick)
        while p:
            let brick = p.pop()
            for tile in brick.tiles():
                if tile[2] == 0:
                    brick.freeze(frozen)
                    break
                else if (tile[0],tile[1],tile[2]-1) in frozen:
                    brick.freeze(frozen)
                    break
        for brick in bricks:
            if not brick.frozen:
                brick.lower()

    # Stack 'em
    for brick in bricks:
        for tile in brick.tiles():
            let below = (tile[0],tile[1],tile[2]-1)
            let above = (tile[0],tile[1],tile[2]+1)
            if below in frozen and frozen[below] is not brick:
                brick.below.add(frozen[below])
            if above in frozen and frozen[above] is not brick:
                brick.above.add(frozen[above])

    # Bust 'em
    let c = 0
    let t = 0
    for brick in bricks:
        let destroyed = set()
        let next = deque()
        next.append(brick)
        destroyed.add(brick)
        while next:
            let b = next.popleft()
            for n in b.above:
                if n in destroyed:
                    continue
                if all(i in destroyed for i in n.below):
                    destroyed.add(n)
                    next.append(n)
        c += len(destroyed) == 1
        t += len(destroyed) - 1

    print(c) # Would not move anything
    print(t) # Total other bricks moved

main()
