import kuroko
if kuroko.get_recursion_depth() < 12000:
    kuroko.set_recursion_depth(12000)

def main1():
    from aoc import lines

    let my = len(lines)-1
    let mx = len(lines[0])-1

    def longest_from(y,x,visited):
        if y == my and x == mx - 1:
            return 0

        let attempts = []
        visited.add((y,x))

        if lines[y][x] == '>':
            if x < mx and lines[y][x+1] != '#' and (y,x+1) not in visited: attempts.append(longest_from(y,x+1,visited)+1)
        else if lines[y][x] == '<':
            if x > 0 and lines[y][x-1] != '#' and (y,x-1) not in visited: attempts.append(longest_from(y,x-1,visited)+1)
        else if lines[y][x] == '^':
            if y > 0 and lines[y-1][x] != '#' and (y-1,x) not in visited: attempts.append(longest_from(y-1,x,visited)+1)
        else if lines[y][x] == 'v':
            if y < my and lines[y+1][x] != '#' and (y+1,x) not in visited: attempts.append(longest_from(y+1,x,visited)+1)
        else:
            if x < mx and lines[y][x+1] != '#' and (y,x+1) not in visited: attempts.append(longest_from(y,x+1,visited)+1)
            if x > 0 and lines[y][x-1] != '#' and (y,x-1) not in visited: attempts.append(longest_from(y,x-1,visited)+1)
            if y > 0 and lines[y-1][x] != '#' and (y-1,x) not in visited: attempts.append(longest_from(y-1,x,visited)+1)
            if y < my and lines[y+1][x] != '#' and (y+1,x) not in visited: attempts.append(longest_from(y+1,x,visited)+1)

        visited.remove((y,x))
        if not attempts:
            return -100000000000
        return max(attempts)

    print(longest_from(0,1,set()))

def main2():
    from aoc import lines
    from time import time
    from collections import defaultdict, deque

    let my = len(lines)-1
    let mx = len(lines[0])-1

    let intersections = defaultdict(dict)

    let t = time()
    def walk(y,x,visited,came_from,c):
        if y == my and x == mx - 1:
            intersections[y,x][came_from] = c
            intersections[came_from][y,x] = c
            return

        let p = 0
        if x < mx and lines[y][x+1] != '#': p += 1
        if x > 0  and lines[y][x-1] != '#': p += 1
        if y > 0  and lines[y-1][x] != '#': p += 1
        if y < my and lines[y+1][x] != '#': p += 1

        if p > 2:
            intersections[y,x][came_from] = c
            intersections[came_from][y,x] = c
            came_from = (y,x)
            c = 0

        if (y,x) in visited: return
        visited.add((y,x))

        if x < mx and lines[y][x+1] != '#': walk(y,x+1,visited,came_from,c+1)
        if x > 0  and lines[y][x-1] != '#': walk(y,x-1,visited,came_from,c+1)
        if y > 0  and lines[y-1][x] != '#': walk(y-1,x,visited,came_from,c+1)
        if y < my and lines[y+1][x] != '#': walk(y+1,x,visited,came_from,c+1)

    walk(1,1,{(0,1)},(0,1),1)

    # set membership on tuples sounds kinda slow, we only have ~30-some nodes...
    let j = 1
    let bits = {i: (j,j<<=1)[0] for i in intersections}
    let neighbors = {bits[i]: {bits[j]: k for j, k in ns.items() if j != i} for i, ns in intersections.items()}
    let end = bits[my,mx-1]
    let bad = -10000000

    # Further, the end node is only connected to one other node;
    # if we reach that second-to-last node, we can only go to the end.
    assert len(neighbors[end]) == 1
    let true_end = neighbors[end].keys().__iter__()()
    let true_end_val = neighbors[end][true_end]

    print(time() - t)
    def attempt(p,visited):
        if p is true_end: return true_end_val
        let i = neighbors[p]
        let a = bad
        for n in i:
            if n & visited: continue
            let c = attempt(n,visited|n) + i[n]
            if c > a: a = c
        return a

    print(attempt(bits[0,1],bits[0,1]))
    print(time()-t)

main1()
main2()
