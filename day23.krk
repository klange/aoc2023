def main1():
    from aoc import lines

    let my = len(lines)-1
    let mx = len(lines[0])-1

    def longest_from(y,x,visited):
        if y == my and x == mx - 1:
            return 0

        let attempts = []
        visited.add((y,x))

        if lines[y][x] == '>':
            if x < mx and lines[y][x+1] != '#' and (y,x+1) not in visited: attempts.append(longest_from(y,x+1,visited)+1)
        else if lines[y][x] == '<':
            if x > 0 and lines[y][x-1] != '#' and (y,x-1) not in visited: attempts.append(longest_from(y,x-1,visited)+1)
        else if lines[y][x] == '^':
            if y > 0 and lines[y-1][x] != '#' and (y-1,x) not in visited: attempts.append(longest_from(y-1,x,visited)+1)
        else if lines[y][x] == 'v':
            if y < my and lines[y+1][x] != '#' and (y+1,x) not in visited: attempts.append(longest_from(y+1,x,visited)+1)
        else:
            if x < mx and lines[y][x+1] != '#' and (y,x+1) not in visited: attempts.append(longest_from(y,x+1,visited)+1)
            if x > 0 and lines[y][x-1] != '#' and (y,x-1) not in visited: attempts.append(longest_from(y,x-1,visited)+1)
            if y > 0 and lines[y-1][x] != '#' and (y-1,x) not in visited: attempts.append(longest_from(y-1,x,visited)+1)
            if y < my and lines[y+1][x] != '#' and (y+1,x) not in visited: attempts.append(longest_from(y+1,x,visited)+1)

        visited.remove((y,x))
        if not attempts:
            return -100000000000
        return max(attempts)

    print(longest_from(0,1,set()))

def main2():
    from aoc import lines
    from time import time

    let my = len(lines)-1
    let mx = len(lines[0])-1

    let intersections = {}
    intersections[0,1] = {}

    let t = time()
    def walk(y,x,visited,came_from,c):
        if y == my and x == mx - 1:
            if (y,x) not in intersections:
                intersections[y,x] = {came_from: c}
            else:
                intersections[y,x][came_from] = c
            intersections[came_from][y,x] = c
            return

        let p = 0
        if x < mx and lines[y][x+1] != '#': p += 1
        if x > 0  and lines[y][x-1] != '#': p += 1
        if y > 0  and lines[y-1][x] != '#': p += 1
        if y < my and lines[y+1][x] != '#': p += 1

        if p > 2:
            if (y,x) not in intersections:
                intersections[y,x] = {came_from: c}
            else:
                intersections[y,x][came_from] = c
            intersections[came_from][y,x] = c
            came_from = (y,x)
            c = 0

        if (y,x) in visited: return
        visited.add((y,x))

        if x < mx and lines[y][x+1] != '#': walk(y,x+1,visited,came_from,c+1)
        if x > 0  and lines[y][x-1] != '#': walk(y,x-1,visited,came_from,c+1)
        if y > 0  and lines[y-1][x] != '#': walk(y-1,x,visited,came_from,c+1)
        if y < my and lines[y+1][x] != '#': walk(y+1,x,visited,came_from,c+1)

    walk(1,1,{(0,1)},(0,1),1)
    print(time() - t)

    let paths = 0
    let end = (my, mx - 1)
    def attempt(p,visited):
        if p == end:
            paths += 1
            return 0
        let i = intersections[p]
        let a = -10000000
        visited.add(p)
        for n in i:
            if n in visited: continue
            let c = attempt(n,visited) + i[n]
            if c > a:
                a = c
        visited.remove(p)
        return a

    print(attempt((0,1),{(0,1)}))
    print(paths,'viable paths')
    print(time()-t)

main1()
main2()
