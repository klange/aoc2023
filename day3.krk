from aoc import lines

if True:
    let field = {}
    for r in range(len(lines)):
        for c in range(len(lines[r])):
            field[r,c] = lines[r][c]

    let n_cells = ((-1,-1),(-1,0),(-1,1),
                    (0,-1),(0,1),
                    (1,-1),(1,0),(1,1))

    def touches(r,c):
        for y,x in n_cells:
            if field.get((r+y,c+x),'.') not in '.1234567890':
                return True
        return False

    let nums = {}

    class Num:
        def __init__(self,a):
            self.a = a
            self.t = False
        @property
        def val(self):
            return int(self.a)
        def append(self,a):
            self.a += a

    for r in range(len(lines)):
        for c in range(len(lines[r])):
            if (r,c) in nums:
                continue
            if field[r,c] in '0123456789':
                let n = Num(field[r,c])
                nums[r,c] = n
                n.t |= touches(r,c)
                for x in range(c+1,len(lines[r])):
                    if field[r,x] in '0123456789':
                        n.append(field[r,x])
                        if not n.t:
                            n.t |= touches(r,x)
                        nums[r,x] = n
                    else:
                        break

    let s = 0
    for num in set(nums.values()):
        if num.t:
            s += num.val
    print(s)

    def neighbors(r,c):
        let s = set()
        for y,x in n_cells:
            let n = nums.get((r+y,c+x),None)
            if n is not None:
                s.add(n)
        return s

    s = 0
    for r in range(len(lines)):
        for c in range(len(lines[r])):
            if field[r,c] == '*':
                let n = neighbors(r,c)
                if len(n) == 2:
                    let x = list(n)
                    s += x[0].val * x[1].val

    print(s)
