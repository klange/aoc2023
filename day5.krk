from aoc import lines

def main():
    let seeds
    let current
    let things = {}
    let next = {}
    for line in lines:
        if line.startswith('seeds:'):
            seeds = [int(x) for x in line.split(':')[1].split()]
            continue
        if line.endswith('map:'):
            current = tuple(line[:-5].split('-to-'))
            things[current] = []
            next[current[0]] = current[1]
            continue
        if line:
            things[current].append([int(x) for x in line.split()])

    let top = None
    let top_s = None
    for seed in seeds:
        let s = 'seed'
        let t = next[s]
        let i = seed

        while t:
            for _dest, _source, c in things[s,t]:
                if i >= _source and i < _source + c:
                    i = _dest + i - _source
                    break
            s = t
            t = next.get(t,None)

        if top is None or i < top:
            top = i
            top_s = seed

    print(top)

def p2():
    let seeds
    let current
    let things = {}
    let next = {}
    for line in lines:
        if line.startswith('seeds:'):
            seeds = [int(x) for x in line.split(':')[1].split()]
            continue
        if line.endswith('map:'):
            current = tuple(line[:-5].split('-to-'))
            things[current] = []
            next[current[0]] = current[1]
            continue
        if line:
            things[current].append([int(x) for x in line.split()])

    let top = None
    let top_s = None

    def pairs(l):
        for i in range(len(l)//2):
            yield (l[i*2], l[i*2+1])

    let _pairs = list(pairs(seeds))

    for seed_start, seed_count in _pairs:
        for seed in range(seed_start, seed_start+seed_count, 10000):
            let s = 'seed'
            let t = next[s]
            let i = seed

            while t:
                for _dest, _source, c in things[s,t]:
                    if i >= _source and i < _source + c:
                        i = _dest + i - _source
                        break
                s = t
                t = next.get(t,None)


            if top is None or i < top:
                top = i
                top_s = seed

    def seed_in_range(seed):
        for seed_start, seed_count in _pairs:
            if seed >= seed_start and seed < seed_start + seed_count:
                return True
        return False

    for seed in range(top_s-10000,top_s+10000):
        if seed_in_range(seed):
            let s = 'seed'
            let t = next[s]
            let i = seed

            while t:
                for _dest, _source, c in things[s,t]:
                    if i >= _source and i < _source + c:
                        i = _dest + i - _source
                        break
                s = t
                t = next.get(t,None)


            if top is None or i < top:
                top = i
                top_s = seed

    print(top)

main()
p2()
